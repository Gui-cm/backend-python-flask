pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="613036180535"
        AWS_DEFAULT_REGION="us-east-1" 
        IMAGE_REPO_NAME="houpa-qa"
        IMAGE_TAG="latest"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        PROFILE_AWS_CLI="darede"
        AWS_ECS_SERVICE = "ecs-service-houpa"
        AWS_ECS_TASK_DEFINITION = "houpa-app"
        AWS_ECS_COMPATIBILITY = "FARGATE"
        AWS_ECS_NETWORK_MODE = "awsvpc"
        POM_VERSION = getVersion()
        JAR_NAME = getJarName()
        AWS_ECS_CPU = "256"
        AWS_ECS_MEMORY = "512"
        AWS_ECS_CLUSTER = "ch-dev"
        AWS_ECS_TASK_DEFINITION_PATH = "home/ec2-users/taskdefinition.json"
    }
   
    stages {
        
         stage('Logging into AWS ECR') {
            steps {
              script {
                sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} --profile ${PROFILE_AWS_CLI}| docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
                }
                 
            }
        }
        
        stage('Cloning Git') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '053c5889-a082-47f4-81a9-9dbf22c59ee2', url: 'https://github.com/Gui-cm/backend-python-flask.git']]])     
            }
        }
  
    // Building Docker images
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
        }
      }
    }
   
    // Uploading Docker images into AWS ECR
    stage('Pushing to ECR') {
     steps{  
          script {
            sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:$IMAGE_TAG"
            sh "docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
          }
        }
      }

    stage('Deploy in ECS') {
      steps {
        withCredentials([string(credentialsId: 'AWS_EXECUTION_ROL_SECRET', variable: 'AWS_ECS_EXECUTION_ROL'),string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
          script {
            updateContainerDefinitionJsonWithImageVersion()
            sh("/usr/local/bin/aws ecs register-task-definition --region ${AWS_DEFAULT_REGION} --family ${AWS_ECS_TASK_DEFINITION} --execution-role-arn ${AWS_ECS_EXECUTION_ROL} --requires-compatibilities ${AWS_ECS_COMPATIBILITY} --network-mode ${AWS_ECS_NETWORK_MODE} --cpu ${AWS_ECS_CPU} --memory ${AWS_ECS_MEMORY} --container-definitions file://${AWS_ECS_TASK_DEFINITION_PATH}")
            def taskRevision = sh(script: "/usr/local/bin/aws ecs describe-task-definition --task-definition ${AWS_ECS_TASK_DEFINITION} | egrep \"revision\" | tr \"/\" \" \" | awk '{print \$2}' | sed 's/\"\$//'", returnStdout: true)
            sh("/usr/local/bin/aws ecs update-service --cluster ${AWS_ECS_CLUSTER} --service ${AWS_ECS_SERVICE} --task-definition ${AWS_ECS_TASK_DEFINITION}:${taskRevision}")
          }
        }
      }
    }

    }
}